'use strict';

var DrumKitDispatcher = require('../dispatcher/DrumKitDispatcher');
var DrumKitConstants = require('../constants/DrumKitConstants');

var DrumKitActions = {
  addInstrument: function addInstrument(instrument) {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.ADD_INSTRUMENT,
      instrument: instrument
    });
  },
  copyMeasure: function copyMeasure(item) {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.COPY_MEASURE,
      item: item
    });
  },

  pastMeasure: function pastMeasure(item) {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.PAST_MEASURE,
      item: item
    });
  },

  clearMeasure: function clearMeasure(item) {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.CLEAR_MEASURE,
      item: item
    });
  },

  bpmChange: function bpmChange(item) {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.CHANGE_BPM,
      item: item
    });
  },

  dpbChange: function dpbChange(item) {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.CHANGE_DPB,
      item: item
    });
  },

  beatpermeasureChange: function beatpermeasureChange(item) {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.CHANGE_BEATPEARMEASURE,
      item: item
    });
  },

  setCurrentTime: function setCurrentTime(item) {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.SET_CURRENTTIME,
      item: item
    });
  },

  elapsedtimeChange: function elapsedtimeChange(item) {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.CHANGE_ELAPSEDTIME,
      item: item
    });
  },

  playDrumKit: function playDrumKit() {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.PLAY_DRUMKIT
    });
  },

  pauseDrumKit: function pauseDrumKit() {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.PAUSE_DRUMKIT
    });
  },

  stopDrumKit: function stopDrumKit() {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.STOP_DRUMKIT
    });
  },

  changeBit: function changeBit(instrument, bitindex, bit) {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.CHANGE_BIT,
      instrument: instrument,
      bitindex: bitindex,
      bit: bit
    });
  },

  loadDrumKit: function loadDrumKit(id) {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.LOAD_DRUMKIT,
      id: id
    });
  },

  timeChange: function timeChange(item) {
    DrumKitDispatcher.handleViewAction({
      actionType: DrumKitConstants.CHANGE_TIME,
      item: item
    });
  }
};

module.exports = DrumKitActions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9hY3Rpb25zL0RydW1LaXRBY3Rpb25zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxvQkFBb0IsUUFBUSxpQ0FBUixDQUF4QjtBQUNBLElBQUksbUJBQW1CLFFBQVEsK0JBQVIsQ0FBdkI7O0FBRUEsSUFBSSxpQkFBaUI7QUFDbkIsaUJBQWUsdUJBQVMsVUFBVCxFQUFvQjtBQUNqQyxzQkFBa0IsZ0JBQWxCLENBQW1DO0FBQ2pDLGtCQUFXLGlCQUFpQixjQURLO0FBRWpDLGtCQUFZO0FBRnFCLEtBQW5DO0FBSUQsR0FOa0I7QUFPbkIsZUFBYSxxQkFBUyxJQUFULEVBQWM7QUFDekIsc0JBQWtCLGdCQUFsQixDQUFtQztBQUNqQyxrQkFBVyxpQkFBaUIsWUFESztBQUVqQyxZQUFNO0FBRjJCLEtBQW5DO0FBSUQsR0Faa0I7O0FBY25CLGVBQWEscUJBQVMsSUFBVCxFQUFjO0FBQ3pCLHNCQUFrQixnQkFBbEIsQ0FBbUM7QUFDakMsa0JBQVcsaUJBQWlCLFlBREs7QUFFakMsWUFBTTtBQUYyQixLQUFuQztBQUlELEdBbkJrQjs7QUFxQm5CLGdCQUFjLHNCQUFTLElBQVQsRUFBYztBQUMxQixzQkFBa0IsZ0JBQWxCLENBQW1DO0FBQ2pDLGtCQUFXLGlCQUFpQixhQURLO0FBRWpDLFlBQU07QUFGMkIsS0FBbkM7QUFJRCxHQTFCa0I7O0FBNEJuQixhQUFXLG1CQUFTLElBQVQsRUFBYztBQUN2QixzQkFBa0IsZ0JBQWxCLENBQW1DO0FBQ2pDLGtCQUFXLGlCQUFpQixVQURLO0FBRWpDLFlBQU07QUFGMkIsS0FBbkM7QUFJRCxHQWpDa0I7O0FBbUNuQixhQUFXLG1CQUFTLElBQVQsRUFBYztBQUN2QixzQkFBa0IsZ0JBQWxCLENBQW1DO0FBQ2pDLGtCQUFXLGlCQUFpQixVQURLO0FBRWpDLFlBQU07QUFGMkIsS0FBbkM7QUFJRCxHQXhDa0I7O0FBMENuQix3QkFBc0IsOEJBQVMsSUFBVCxFQUFjO0FBQ2xDLHNCQUFrQixnQkFBbEIsQ0FBbUM7QUFDakMsa0JBQVcsaUJBQWlCLHNCQURLO0FBRWpDLFlBQU07QUFGMkIsS0FBbkM7QUFJRCxHQS9Da0I7O0FBaURuQixrQkFBZ0Isd0JBQVMsSUFBVCxFQUFjO0FBQzVCLHNCQUFrQixnQkFBbEIsQ0FBbUM7QUFDakMsa0JBQVcsaUJBQWlCLGVBREs7QUFFakMsWUFBTTtBQUYyQixLQUFuQztBQUlELEdBdERrQjs7QUF5RHJCLHFCQUFtQiwyQkFBUyxJQUFULEVBQWM7QUFDN0Isc0JBQWtCLGdCQUFsQixDQUFtQztBQUNqQyxrQkFBVyxpQkFBaUIsa0JBREs7QUFFakMsWUFBTTtBQUYyQixLQUFuQztBQUlELEdBOURrQjs7QUFnRW5CLGVBQWEsdUJBQVU7QUFDckIsc0JBQWtCLGdCQUFsQixDQUFtQztBQUNqQyxrQkFBVyxpQkFBaUI7QUFESyxLQUFuQztBQUdELEdBcEVrQjs7QUFzRW5CLGdCQUFjLHdCQUFVO0FBQ3RCLHNCQUFrQixnQkFBbEIsQ0FBbUM7QUFDakMsa0JBQVcsaUJBQWlCO0FBREssS0FBbkM7QUFHRCxHQTFFa0I7O0FBNEVuQixlQUFhLHVCQUFVO0FBQ3JCLHNCQUFrQixnQkFBbEIsQ0FBbUM7QUFDakMsa0JBQVcsaUJBQWlCO0FBREssS0FBbkM7QUFHRCxHQWhGa0I7O0FBa0ZuQixhQUFVLG1CQUFTLFVBQVQsRUFBcUIsUUFBckIsRUFBK0IsR0FBL0IsRUFBbUM7QUFDM0Msc0JBQWtCLGdCQUFsQixDQUFtQztBQUNqQyxrQkFBVyxpQkFBaUIsVUFESztBQUVqQyxrQkFBWSxVQUZxQjtBQUdqQyxnQkFBVSxRQUh1QjtBQUlqQyxXQUFLO0FBSjRCLEtBQW5DO0FBTUQsR0F6RmtCOztBQTJGbkIsZUFBYSxxQkFBUyxFQUFULEVBQVk7QUFDdkIsc0JBQWtCLGdCQUFsQixDQUFtQztBQUNqQyxrQkFBVyxpQkFBaUIsWUFESztBQUVqQyxVQUFJO0FBRjZCLEtBQW5DO0FBSUQsR0FoR2tCOztBQWtHbkIsY0FBWSxvQkFBUyxJQUFULEVBQWM7QUFDeEIsc0JBQWtCLGdCQUFsQixDQUFtQztBQUNqQyxrQkFBVyxpQkFBaUIsV0FESztBQUVqQyxZQUFNO0FBRjJCLEtBQW5DO0FBSUQ7QUF2R2tCLENBQXJCOztBQTBHQSxPQUFPLE9BQVAsR0FBaUIsY0FBakIiLCJmaWxlIjoiRHJ1bUtpdEFjdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRHJ1bUtpdERpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi9kaXNwYXRjaGVyL0RydW1LaXREaXNwYXRjaGVyJyk7XG52YXIgRHJ1bUtpdENvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cy9EcnVtS2l0Q29uc3RhbnRzJyk7XG5cbnZhciBEcnVtS2l0QWN0aW9ucyA9IHtcbiAgYWRkSW5zdHJ1bWVudDogZnVuY3Rpb24oaW5zdHJ1bWVudCl7XG4gICAgRHJ1bUtpdERpc3BhdGNoZXIuaGFuZGxlVmlld0FjdGlvbih7XG4gICAgICBhY3Rpb25UeXBlOkRydW1LaXRDb25zdGFudHMuQUREX0lOU1RSVU1FTlQsXG4gICAgICBpbnN0cnVtZW50OiBpbnN0cnVtZW50XG4gICAgfSlcbiAgfSxcbiAgY29weU1lYXN1cmU6IGZ1bmN0aW9uKGl0ZW0pe1xuICAgIERydW1LaXREaXNwYXRjaGVyLmhhbmRsZVZpZXdBY3Rpb24oe1xuICAgICAgYWN0aW9uVHlwZTpEcnVtS2l0Q29uc3RhbnRzLkNPUFlfTUVBU1VSRSxcbiAgICAgIGl0ZW06IGl0ZW1cbiAgICB9KVxuICB9LFxuXG4gIHBhc3RNZWFzdXJlOiBmdW5jdGlvbihpdGVtKXtcbiAgICBEcnVtS2l0RGlzcGF0Y2hlci5oYW5kbGVWaWV3QWN0aW9uKHtcbiAgICAgIGFjdGlvblR5cGU6RHJ1bUtpdENvbnN0YW50cy5QQVNUX01FQVNVUkUsXG4gICAgICBpdGVtOiBpdGVtXG4gICAgfSlcbiAgfSxcblxuICBjbGVhck1lYXN1cmU6IGZ1bmN0aW9uKGl0ZW0pe1xuICAgIERydW1LaXREaXNwYXRjaGVyLmhhbmRsZVZpZXdBY3Rpb24oe1xuICAgICAgYWN0aW9uVHlwZTpEcnVtS2l0Q29uc3RhbnRzLkNMRUFSX01FQVNVUkUsXG4gICAgICBpdGVtOiBpdGVtXG4gICAgfSlcbiAgfSxcblxuICBicG1DaGFuZ2U6IGZ1bmN0aW9uKGl0ZW0pe1xuICAgIERydW1LaXREaXNwYXRjaGVyLmhhbmRsZVZpZXdBY3Rpb24oe1xuICAgICAgYWN0aW9uVHlwZTpEcnVtS2l0Q29uc3RhbnRzLkNIQU5HRV9CUE0sXG4gICAgICBpdGVtOiBpdGVtXG4gICAgfSlcbiAgfSxcblxuICBkcGJDaGFuZ2U6IGZ1bmN0aW9uKGl0ZW0pe1xuICAgIERydW1LaXREaXNwYXRjaGVyLmhhbmRsZVZpZXdBY3Rpb24oe1xuICAgICAgYWN0aW9uVHlwZTpEcnVtS2l0Q29uc3RhbnRzLkNIQU5HRV9EUEIsXG4gICAgICBpdGVtOiBpdGVtXG4gICAgfSlcbiAgfSxcblxuICBiZWF0cGVybWVhc3VyZUNoYW5nZTogZnVuY3Rpb24oaXRlbSl7XG4gICAgRHJ1bUtpdERpc3BhdGNoZXIuaGFuZGxlVmlld0FjdGlvbih7XG4gICAgICBhY3Rpb25UeXBlOkRydW1LaXRDb25zdGFudHMuQ0hBTkdFX0JFQVRQRUFSTUVBU1VSRSxcbiAgICAgIGl0ZW06IGl0ZW1cbiAgICB9KVxuICB9LFxuXG4gIHNldEN1cnJlbnRUaW1lOiBmdW5jdGlvbihpdGVtKXtcbiAgICBEcnVtS2l0RGlzcGF0Y2hlci5oYW5kbGVWaWV3QWN0aW9uKHtcbiAgICAgIGFjdGlvblR5cGU6RHJ1bUtpdENvbnN0YW50cy5TRVRfQ1VSUkVOVFRJTUUsXG4gICAgICBpdGVtOiBpdGVtXG4gICAgfSlcbiAgfSxcblxuXG5lbGFwc2VkdGltZUNoYW5nZTogZnVuY3Rpb24oaXRlbSl7XG4gICAgRHJ1bUtpdERpc3BhdGNoZXIuaGFuZGxlVmlld0FjdGlvbih7XG4gICAgICBhY3Rpb25UeXBlOkRydW1LaXRDb25zdGFudHMuQ0hBTkdFX0VMQVBTRURUSU1FLFxuICAgICAgaXRlbTogaXRlbVxuICAgIH0pXG4gIH0sXG5cbiAgcGxheURydW1LaXQ6IGZ1bmN0aW9uKCl7XG4gICAgRHJ1bUtpdERpc3BhdGNoZXIuaGFuZGxlVmlld0FjdGlvbih7XG4gICAgICBhY3Rpb25UeXBlOkRydW1LaXRDb25zdGFudHMuUExBWV9EUlVNS0lUXG4gICAgfSlcbiAgfSxcblxuICBwYXVzZURydW1LaXQ6IGZ1bmN0aW9uKCl7XG4gICAgRHJ1bUtpdERpc3BhdGNoZXIuaGFuZGxlVmlld0FjdGlvbih7XG4gICAgICBhY3Rpb25UeXBlOkRydW1LaXRDb25zdGFudHMuUEFVU0VfRFJVTUtJVFxuICAgIH0pXG4gIH0sXG5cbiAgc3RvcERydW1LaXQ6IGZ1bmN0aW9uKCl7XG4gICAgRHJ1bUtpdERpc3BhdGNoZXIuaGFuZGxlVmlld0FjdGlvbih7XG4gICAgICBhY3Rpb25UeXBlOkRydW1LaXRDb25zdGFudHMuU1RPUF9EUlVNS0lUXG4gICAgfSlcbiAgfSxcblxuICBjaGFuZ2VCaXQ6ZnVuY3Rpb24oaW5zdHJ1bWVudCwgYml0aW5kZXgsIGJpdCl7XG4gICAgRHJ1bUtpdERpc3BhdGNoZXIuaGFuZGxlVmlld0FjdGlvbih7XG4gICAgICBhY3Rpb25UeXBlOkRydW1LaXRDb25zdGFudHMuQ0hBTkdFX0JJVCxcbiAgICAgIGluc3RydW1lbnQ6IGluc3RydW1lbnQsXG4gICAgICBiaXRpbmRleDogYml0aW5kZXgsXG4gICAgICBiaXQ6IGJpdFxuICAgIH0pXG4gIH0sXG5cbiAgbG9hZERydW1LaXQ6IGZ1bmN0aW9uKGlkKXtcbiAgICBEcnVtS2l0RGlzcGF0Y2hlci5oYW5kbGVWaWV3QWN0aW9uKHtcbiAgICAgIGFjdGlvblR5cGU6RHJ1bUtpdENvbnN0YW50cy5MT0FEX0RSVU1LSVQsXG4gICAgICBpZDogaWRcbiAgICB9KVxuICB9LFxuXG4gIHRpbWVDaGFuZ2U6IGZ1bmN0aW9uKGl0ZW0pe1xuICAgIERydW1LaXREaXNwYXRjaGVyLmhhbmRsZVZpZXdBY3Rpb24oe1xuICAgICAgYWN0aW9uVHlwZTpEcnVtS2l0Q29uc3RhbnRzLkNIQU5HRV9USU1FLFxuICAgICAgaXRlbTogaXRlbVxuICAgIH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEcnVtS2l0QWN0aW9uc1xuIl19